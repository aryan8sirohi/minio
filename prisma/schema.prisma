// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

//generator client {
//provider = "prisma-client-js"
//}

//datasource db {
// provider = "mysql"
// NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
// Further reading:
// https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
// https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
//url      = env("DATABASE_URL")
//}

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"

  url = env("DATABASE_URL")
  //url = "mysql://groops:efiaAwpJntprBKFS@gr-oops.com:3306/groops" 
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime @updatedAt

  @@unique([identifier, token]) // @@unique the block level-- same as identifier string  @unique
}

model User {
  id            String       @id @default(cuid())
  name String?
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  password      String?
  role          Role?
  address       String?
  phone         Int?
  birthday      DateTime?
  cart          Cart[]
  order         Order[]
  Group         Group[]
  GroupMember   GroupMember[]
  username      String?
  postCode      String?
  ShippingAddress  ShippingAddress[]
}

model Category {
  id       Int      @id @default(autoincrement())
  name     String
  url     String
  description String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  products Product[]
}

model Product {
  skuid               String  @id
  englishProductName  String
  chineseProductNName String?
  frenchProductNName  String?
  placeOfOrigin       String?
  productWeight       String
  description         String?
  alcohol             Boolean @default(false)
  price               Int     @default(0)
  image               String
  categoryId  Int?
  category    Category?  @relation(fields: [categoryId], references: [id])
  retailPrice         Int     @default(0)
  costPrice           Int     @default(0)
  stock               Int     @default(0)
  Cart                Cart[]
  order              PurchasedItem[]
}

model Order {
  orderId       String          @id @default(cuid())
  orderDate     DateTime        @default(now())
  user          User            @relation(fields: [userId], references: [id])
  userId        String          
  paymentIntent  String?          
  subTotal       Int     @default(0)     
  total          Int        @default(0)  
  salesTax       Float?
  greenFee       Float?
  tipDelivery   Float? 
  delivery       Float?   
  group Group? @relation(fields: [groupId], references: [groupId])
  groupId String? 
  purchasedItem PurchasedItem[]
  shippingAddress Json?
}

model PurchasedItem {
  id  String          @id @default(cuid())
  product   Product @relation(fields: [productId], references: [skuid])
  productId String  
  qty String 
  order     Order   @relation(fields: [orderId], references: [orderId])
  orderId   String  
}

model Cart {
  id        Int     @id @default(autoincrement())
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  productId String  @unique
  product   Product @relation(fields: [productId], references: [skuid])
  qty       String
}

model Group {
  groupId           String        @id @default(cuid())
  groupMaster       User          @relation(fields: [groupMasterId], references: [id])
  groupMasterId     String        
  groupName         String?
  groupImg          String?
  groupCode         String?    
  startDate         DateTime      @default(now())
  endDate           DateTime?
  isActive   Boolean @default(true)
  groupOrder        Order[]    
  groupDiscountRateId String?
  groupDiscountRate DiscountRate?  @relation(fields: [groupDiscountRateId], references: [groupId])
  groupMember       GroupMember[]
}


model GroupMember {
  groupMemberId String @id @default(cuid())
  user          User   @relation(fields: [userId], references: [id])
  userId        String 
  group         Group  @relation(fields: [groupId], references: [groupId])
  groupId       String
}

model DiscountRate {
  groupId     String @id @default(cuid())
  group        Group[]
  discountRate Float
  memberCount Int @default(0)
}

enum Role {
  GROUPMASTER
  GROUPMEMBER
}


model ShippingAddress {
  id           Int     @id @default(autoincrement())
  user         User    @relation(fields: [userId], references: [id]) 
  userId       String
  firstName    String? 
  lastName     String? 
  address1     String? 
  address2     String? 
  postalCode   String? 
  city         String?
  isPrimaryAddress Boolean @default(false)
}
